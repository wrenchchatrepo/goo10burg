import sys
from github import Github
from google.cloud import asset_v1, service_usage_v1, logging_v2, storage, bigquery, resourcemanager_v3
from google.cloud.billing.budgets_v1 import BudgetServiceClient
from google.api_core import exceptions
from datetime import datetime
import yaml

# Function to list all projects
def get_all_projects():
    client = resourcemanager_v3.ProjectsClient()
    projects = []
    try:
        request = resourcemanager_v3.SearchProjectsRequest()
        for project in client.search_projects(request=request):
            projects.append(project)
    except exceptions.PermissionDenied:
        print("Permission denied when trying to list all projects. Make sure you have the necessary permissions.")
    except Exception as e:
        print(f"An error occurred while listing projects: {e}")
    return projects

# Function to list GitHub repositories
def get_github_repositories(org_name):
    g = Github()  # No token needed for public repositories
    repos = []
    try:
        for repo in g.get_organization(org_name).get_repos(type="public"):
            repos.append(repo.name)
    except Exception as e:
        repos = f"Error: {str(e)}"
    return repos

# Function to get detailed information about a project
def get_project_details(project_id, org_name):
    details = {}

    try:
        # List resources
        client = asset_v1.AssetServiceClient()
        scope = f"projects/{project_id}"
        request = asset_v1.ListAssetsRequest(
            parent=scope,
            content_type=asset_v1.ContentType.RESOURCE,
            page_size=1000,
        )
        response = client.list_assets(request=request)
        details['resources'] = [{'name': asset.name, 'type': asset.asset_type} for asset in response]
    except exceptions.PermissionDenied:
        details['resources'] = "Permission denied"
    except Exception as e:
        details['resources'] = f"Error: {str(e)}"

    try:
        # List enabled APIs
        client = service_usage_v1.ServiceUsageClient()
        parent = f"projects/{project_id}"
        request = service_usage_v1.ListServicesRequest(
            parent=parent,
            filter="state:ENABLED",
        )
        response = client.list_services(request=request)
        details['enabled_apis'] = [service.config.name for service in response.services]
    except exceptions.PermissionDenied:
        details['enabled_apis'] = "Permission denied"
    except Exception as e:
        details['enabled_apis'] = f"Error: {str(e)}"

    try:
        # List GitHub repositories
        details['github_repositories'] = get_github_repositories(org_name)
    except Exception as e:
        details['github_repositories'] = f"Error: {str(e)}"
  
    # Add other details like storage buckets, BigQuery datasets, etc.
    return details

# Function to summarize project details
def summarize_project(details):
    summary = {
        'resources_status': details.get('resources', 'Unknown'),
        'apis_enabled': details.get('enabled_apis', []),
        'github_repositories': details.get('github_repositories', []),
        # Add other summaries like storage buckets, BigQuery datasets, etc.
    }
    return summary

# Function to write the collected data and summary to a YAML file
def write_to_yaml_file(project_data, summary_data):
    output = {
        'projects': project_data,
        'summary': summary_data
    }
    
    # Generate the timestamp
    timestamp = datetime.now().strftime("Generated by gcp_scan_py on %Y-%m-%d %H:%M:%S")
    
    with open('gcp_inventory_with_summary.yaml', 'w') as file:
        # Write the timestamp as a comment at the top of the file
        file.write(f"# {timestamp}\n")
        yaml.dump(output, file)

# Main function to collect GCP information
def collect_gcp_information(org_name):
    projects = get_all_projects()
    project_data = {}
    summary_data = []

    for project in projects:
        project_id = project.project_id
        details = get_project_details(project_id, org_name)
        project_data[project_id] = details

        # Generate the summary for this project
        summary = summarize_project(details)
        summary['project_name'] = project_id  # Add project name to summary
        summary_data.append(summary)

    # Write the complete data and summary to the output file
    write_to_yaml_file(project_data, summary_data)

# Call the collect function with GitHub credentials (if this isn't already done in your script)
if __name__ == "__main__":
    org_name = "your_org_name"  # Replace with your GitHub organization name
    collect_gcp_information(org_name)